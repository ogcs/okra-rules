ext.root = project

group 'org.ogcs'
version '1.0-SNAPSHOT'

subprojects {
    apply plugin: 'java'
    apply plugin: 'distribution'
    apply plugin: 'jacoco'

    sourceCompatibility = 11
    targetCompatibility = 11
    compileJava.options.setEncoding("UTF-8")
    compileTestJava.options.setEncoding("UTF-8")

    dependencies {
        //     slf4j
        compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.9.1'
        compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.9.1'
        compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.9.1'
        compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
        compile group: 'org.slf4j', name: 'jcl-over-slf4j', version: '1.7.25'

        testImplementation('org.junit.jupiter:junit-jupiter:5.5.1')
        testCompile("org.mockito:mockito-core:2.25.0")
    }

    buildscript {
        repositories {
            mavenLocal()
            mavenCentral()
            maven { url "http://repo.maven.apache.org/maven2" }
            maven { url "http://repo.typesafe.com/typesafe/repo" }
            maven { url "http://repo1.maven.org/maven2/" }
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://repo.maven.apache.org/maven2" }
        maven { url "http://repo.typesafe.com/typesafe/repo" }
        maven { url "http://repo1.maven.org/maven2/" }
    }

    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
        ignoreFailures = true
    }

    jacoco {
        toolVersion = "0.8.3"
    }
}

/// <editor-fold desc="Codecov">

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(dir: project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
    jacocoClasspath

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        println("TINYZZH: ${buildDir}/reports/jacoco/report.xml")
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled true
        html.destination file("${buildDir}/reports/html")
        csv.enabled false
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/bean/**'])
        })
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}

/// </editor-fold>
